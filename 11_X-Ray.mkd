# 11. X-Ray

It provides vidibility of performance of your distributed application. Very similar to what Splunk does, it provides a client (**X-Ray daemon**) to collect distributed logs from diffierent hosts via UDP, and then these data are published to the centralised X-Ray Server. And from here you can visualize where your bottlenecks or perfomance impacts are.

**Service Map** is the visualization of the traces performance within your application.

**Segment**: Portion of the trace that corresponds to a single service
**Subsegment**: Remote call or local compoute within a single service
**Trace**: End to end path of a request through out your service
**Filters**: Expression to filter traces or requests
**Annotation**: Business data added to traces, index for filtering (sourcetype?)
**Metadata**: Business data added to traces, but not indexed for filtering (other filtering fields)

## X-Ray and Lambda integration:
AWS Lambda uses environment variables to facilitate communication with the X-Ray daemon and configure the X-Ray SDK.

- _X_AMZN_TRACE_ID: Contains the tracing header, which includes the sampling decision, trace ID, and parent segment ID. If Lambda receives a tracing header when your function is invoked, that header will be used to populate the - - _X_AMZN_TRACE_ID environment variable. If a tracing header was not received, Lambda will generate one for you.
- AWS_XRAY_CONTEXT_MISSING: The X-Ray SDK uses this variable to determine its behavior in the event that your function tries to record X-Ray data, but a tracing header is not available. Lambda sets this value to LOG_ERROR by default.
- AWS_XRAY_DAEMON_ADDRESS: This environment variable exposes the X-Ray daemon's address in the following format: IP_ADDRESS:PORT. You can use the X-Ray daemon's address to send trace data to the X-Ray daemon directly, without using the X-Ray SDK.