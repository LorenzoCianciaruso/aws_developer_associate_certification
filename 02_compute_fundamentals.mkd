# 02. Compute Fundamentals
Aws services:
- **Compute**
- Storage
- Database
- Network

## EC2
### EC2 Characteristics
### AMI
Template of pre-configured EC2 instances containing OS and potentially other software and custom configuration. You can pre select them from: 

1. AWS AMIs
2. create your AMIs depending on your needs,
3. or pick one from AWS marketplace
4. Community AMI

### Instance purchasing options

- On demand: short term used, highest price
- Reserved: reduced cost for a set time you're gonna use the machine for. 1-3 years for example. For long term fixed workload
- Scheduled: Schedule compute time when you need it. Cheaper than On demand
- On spot: unused ec2 resources, cheap but doesn't guarantee machine always up
- On-demand capacity: reserve capacity based on some attributes

### Tenancy
- Shared Tenancy: what's the underlying server that your instance will run on? It guarantees that your instance will run on specific hosts depending on your constraints. The same hosts will be used by multiple customer, it's still just a vm
- Dedicated Instances: Dedicated just to you. They are more expensive
- Dedicated Hosts: more control and visibility in the host.

### Storage
- Persistent by attaching EBS storage. They are detached from the physical host, but within the same netowrk.
- Ephemeral just uses the local storage: when stop or terminated data is lost. If you reboot data will be preserved.

### Security
Security Group: open and close ports for in/out comms

#### Status Checks
- System Status check: Checks for things out of our control: no power, hardware issues etc. Sol: stop instance and restart. Reboot doesn't help because it will run on the same hardware
- Instance Status check: config error on the instance. Incorrect network, corrupt file system, exhausted memory

## ECS - EC2 Container Service
Run dockerised applications in a cluster that is managed by AWS via AWS Fargate.
AWS Fargate is an engine to allow useing ECS and deploy apps to clusters.

Cluster can only scale into a single region, but multiple availability zones.

A **task placement strategy** is an algorithm for selecting instances for task placement or tasks for termination. Task placement strategies can be specified when either running a task or creating a new service.

Amazon ECS supports the following task placement strategies:
* binpack - Place tasks based on the least available amount of CPU or memory. This minimizes the number of instances in use.
* random - Place tasks randomly.
* spread - Place tasks evenly based on the specified value. Accepted values are attribute key-value pairs, instanceId, or host. 

## ECR - Elastic Container Registry Service
Secure location to store and manage Docker images. All managed by AWS.

### Components
#### Registry
Registry is the component that allocate space for your images. You can create images repositories, and you can access
the registry through an url. Similar to Nexus.

#### Authorization Token
You'll need a token in order to communicate with your Docker registry.  

#### Repository
Grouping images in Repositories. You can define some custom access rule to each repository

#### Repository Policy
Policy for accessing Repository, there are some pre-defined ones. These are Resource based policy.
Each user will require access to the **ecr:GetAuthorizationToken** API call in order to get a token and
be validated by the policy

#### Image
Pull or push images to the regist

## AWS Elastic Beanstalk
Service that use config for different environment to deploy an application. The service is free to use.

### Components
- Application version
- Environment
- Environment Configurations
- Environment Tier (Web Server Environment or Worker Environment)
- Configuration Template
- Platform: Components that you need to run your applications
- Applications

## AWS Lambda
Service to run code without managing the underlying infrastructure. Highly scalable and only charge when
the code is actually running.

### Components
- Lamda
- Event sources
- Trigger
- Downstream Resources
- Log Streams

## AWS Batch
Batch computing workload

### Components
- Jobs
- Job Definiton: When, how, what role and computing power
- Job Queues
- Job Scheduler: when to run and for what environment
- Environments: can be Managed or UnManaged

## Amazon Lightsail
Virtual Private Server (VPS) backed by Amazon Infrastructure. Easy, quick and cheap, for small business and single users. 

## Test correction
**Question**: When thinking of AWS Elastic Beanstalk, which statement is true?
**Answer**: Workers Tiers pull data from SQS. Elastic Beanstalk installs a daemon on each Amazon EC2 instance in the Auto Scaling group to process Amazon SQS messages in the worker environment. The daemon pulls data off the Amazon SQS queue, inserts it into the message body of an HTTP POST request, and sends it to a user-configurable URL path on the local host. The content type for the message body within an HTTP POST request is application/json by default. (Doc)[http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features-managing-env-tiers.html]

**Question**:In which of the following AWS Batch components can a user set a priority level, for time-sensitive or low-priority jobs?
**Answer**: Within a job queue. When you submit an AWS Batch job, you submit it to a particular job queue, where it resides until it is scheduled onto a compute environment. You associate one or more compute environments with a job queue, and you can assign priority values for these compute environments and even across job queues themselves. For example, you could have a high priority queue that you submit time-sensitive jobs to, and a low priority queue for jobs that can run anytime when compute resources are cheaper. (Doc)[https://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html]

**Question**: In Elastic Beanstalk, which of the following refers to a version that is deployed onto AWS resources?
**Answer**: An environment. In Elastic Beanstalk, an environment is a version that is deployed onto AWS resources. (Doc)[http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.components.html]


