# 01. IAM
IAM allows you to perform authentication and authorization to access AWS resources

## Users
You create users to identify users (which can be humans or applications) and then you can assign them permissions to access resources.

Ways to authenticate:
- Programmatic: using Access key (20 chars) and Secret (40 chars)
- Via AWS Management Consoel (portal): username and password

## Groups, Roles, Policies
Best policy is to create groups to which you can assign POLICIES so that you can modify once for all the users.
Limit to 100 groups in the AWS account, and each user can be part up to 10 groups.

Roles are used to grant temporary permission to Identities, or permanent roles to Resources. Roles have policies attached.

So Groups and Roles pretty much reflect the same concept, the difference is that Groups are a collections of users to which
policies are attached, while roles set permissions to resources via policies.

### Best practice
Assign role to EC2 instance rather than a set of credentials, so that in can access an s3 bucket for instance.
In this way you don't have the burden to rotate keys and you can easiy update permissions for a fleet of EC2 instances.
```
  *IAM ROLE*
       ^
       |
       |     
    +-----+          +----+
    | EC2 |  ------> | S3 |
    +-----+          +----+
```

You can temporarily add a role to a user for special purposes instead of adding the role or permission stright to the user.

## Roles
4 types of roles:
- Service Role: roles attached to services (es. EC2)
- Aws Service-Linked Role
- Cross-Account access Role (trusting and trusted account for Cross-Account operations)
- Identity Provider Access Role (for Identity federation or Amazon Cognito)

## How to declare a policy in JSON
- Version
- Statement
  - Sid: identifies
  - Action: Operation subject
  - Effect: Allow/Deny, by default it's Deny
  - Resource: Resource subject, ARN arn:partition:service:region:account-id:resource
  - Condition: when is the policy be effective, all the conditions must be met

2 types of policies:
- AWS managed policies
- Custom policies

Inline policies are directly embedded into a User, Group or Role --> they can't be reused across other Identities (BAD PRACTICE)
If there are two contradicting policies, the deny will also take place instead of the allow, independently of the order.

**Identity Federation** allows you to use different Identity providers rather then creating users via AWS Users. (Active Directory, Okta, Google, etc)
It Supports OpenID or SAML

You can extract a Credentials report for audit and security compliance. It contains info such as ARN ID, Last Password rotation, Last Access Key Sec Rotation etc.

## Test correction
**Question**:The IAM service provides a level of integration with the Key Management Service (KMS). Which KMS component(s) can be created using this integration?
**Answer**: KMS Customer Master Key (CMK)
**Explanation**: (KMS and CMK)[https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html]
IAM allows you to create and manage your KMS Customer Master Keys (CMK) from within the IAM Console. The CMK is primarily used to protect data keys, which are used to encrypt your data within AWS.

To administer your CMK, select ‘Encryption Key’s within the side menu bar, from here you can create a new CMK, view any existing CMK’s which will show:

Which Region the key exists in
the alias
The Key ID
It’s status
and the creation date of the CMK

**Question**: If you generated and downloaded a credential report at 16:00, then what time could a new credential report be generated?
**Answer**: 20:00
**Explanation**: The credential report will only be generated once in 4 hours. In our example, if you downloaded a credential report for the first time at 16:00 a new report will be generated and downloaded. If you then wanted to download another credential report at 19:00, a new report will not be generated — instead, the existing report that was generated at 16:00 would simply be downloaded. To generate a new report, you have to wait at least 4 hours from the previous generation.

**Question**:___________________ allows you to delegate access to resources across different AWS accounts that you own without needing to create IAM users in each account.
**Answer**: Cross-Account Access
**Explanation**: You can use a role to delegate access to resources that are in different AWS accounts that you own (Production and Development). You share resources in one account with users in a different account. By setting up cross-account access
in this way, you don't need to create individual IAM users in each account. In addition, users don't have to sign out of one account and sign into another in order to access resources that are in different AWS accounts. After configuring the role, you see how to use the role from the AWS Management Console, the AWS CLI, and the API.
